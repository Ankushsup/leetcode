class Solution {
public:
    bool isPalindrome(string s) {
        
        if(s.empty())
            return true;
        
        int left=0, right=s.length()-1;
        
        while(left<right)
        {
            
            if(tolower(s[left])==tolower(s[right]))
            {
                left++;
                right--;
            }
            
            else if(!isalpha(s[left]) && !isdigit(s[left]))
            {
                left++;
            }
            else if(!isalpha(s[right]) && !isdigit(s[right]))
            {
                right--;
            }
            else
            {
                return false;
            }
            
        }
        return true;
        
    }






second type


bool isPalindrome(string s) {
    for (int i = 0, j = s.size() - 1; i < j; i++, j--) { // Move 2 pointers from each end until they collide
        while (isalnum(s[i]) == false && i < j) i++; // Increment left pointer if not alphanumeric
        while (isalnum(s[j]) == false && i < j) j--; // Decrement right pointer if no alphanumeric
        if (toupper(s[i]) != toupper(s[j])) return false; // Exit and return error if not match
    }
    
    return true;
}
};